schema {
    query: Query
}

# The query type, represents all of the entry points into our object graph
type Query {
    model(id: String!): Model
    models(first: Int = 50, type: ModelType = ECORE): [Model]!
}

type Model {
    id: ID!
    type: ModelType!
    stats: Stats
    metadata: Metadata
    elements: Elements
}

# Types of analysis models
enum ModelType {
    ECORE
    XTEXT
    UML
    BPMN2
    PNML
    SCULPTOR
    RDS
    SIMULINK
    ARCHIMATE
}

type Metadata {
    name: String!
    description: String
}

interface Stats {
    total: Int!
}

type EcoreStats implements Stats {
    total: Int!
    EAttribute: Int
    EClass: Int
    EClassifier: Int
    EDataType: Int
    EPackage: Int
    EReference: Int
    EParameter: Int
    ETypedElement: Int
}

# Exclusive UML stats
type UMLStats implements Stats {
    total: Int!
    Action: Int
    Activity: Int
    Actor: Int
    Association: Int
    Class: Int
    Classifier: Int
    Component: Int
    Enumeration: Int
    Interaction: Int
    Interface: Int
    Package: Int
    State: Int
    StateMachine: Int
    UseCase: Int
}

interface Elements {
    EAttribute: [String]
    EClass: [String]
    EClassifier: [String]
    EDataType: [String]
    EPackage: [String]
    EReference: [String]
    EParameter: [String]
    ETypedElement: [String]
}

type UMLElements implements Elements {
    Action: [String]
    Activity: [String]
    Actor: [String]
    Association: [String]
    Class: [String]
    Classifier: [String]
    Component: [String]
    Enumeration: [String]
    Interaction: [String]
    Interface: [String]
    Package: [String]
    State: [String]
    StateMachine: [String]
    UseCase: [String]
}

#type EcoreMetamodel implements Metamodel {
#type EcoreMetamodel {
#    # common: [String]
#    enums: [String]
#    references: [String]
#    classes: [String]
#    attributes: [String]
#    packages(keyword: String): [String]
#    datatypes: [String]
#}