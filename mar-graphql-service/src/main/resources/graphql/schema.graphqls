schema {
    query: Query
}

type Query {
    model(id: String!): Model
    models(first: Int = 50, type: Type): [Model]!
}

type Metadata {
    # name(keyword: String): String!
    name: String!
    description: String
    url: String!
}

type Model {
    id: ID!
    modelId: ID!
    type: Type!
    metadata: Metadata
    stats: Stats
    elements: Elements
}

interface Stats {
    total: Int!
}

union Elements = EcoreElements | UMLElements

type EcoreStats implements Stats {
    total(filter: LogicalFilterInput): Int!
    EAttribute(filter: LogicalFilterInput): Int
    EClass(filter: LogicalFilterInput): Int
    EClassifier(filter: LogicalFilterInput): Int
    EDataType(filter: LogicalFilterInput): Int
    EPackage(filter: LogicalFilterInput): Int
    EReference(filter: LogicalFilterInput): Int
    EParameter(filter: LogicalFilterInput): Int
    ETypedElement(filter: LogicalFilterInput): Int
}

type UMLStats implements Stats {
    total(filter: LogicalFilterInput): Int!
    Action(filter: LogicalFilterInput): Int
    Activity(filter: LogicalFilterInput): Int
    Actor(filter: LogicalFilterInput): Int
    Association(filter: LogicalFilterInput): Int
    Class(filter: LogicalFilterInput): Int
    Classifier(filter: LogicalFilterInput): Int
    Component(filter: LogicalFilterInput): Int
    Enumeration(filter: LogicalFilterInput): Int
    Interaction(filter: LogicalFilterInput): Int
    Interface(filter: LogicalFilterInput): Int
    Package(filter: LogicalFilterInput): Int
    State(filter: LogicalFilterInput): Int
    StateMachine(filter: LogicalFilterInput): Int
    UseCase(filter: LogicalFilterInput): Int
}

type EcoreElements {
    EAttribute(filter: NameFilterInput): [String]
    EClass(filter: NameFilterInput): [String]
    EClassifier(filter: NameFilterInput): [String]
    EDataType(filter: NameFilterInput): [String]
    EPackage(filter: NameFilterInput): [String]
    EReference(filter: NameFilterInput): [String]
    EParameter(filter: NameFilterInput): [String]
    ETypedElement(filter: NameFilterInput): [String]
}

type UMLElements {
    Action(filter: NameFilterInput): [String]
    Activity(filter: NameFilterInput): [String]
    Actor(filter: NameFilterInput): [String]
    Association(filter: NameFilterInput): [String]
    Class(filter: NameFilterInput): [String]
    Classifier(filter: NameFilterInput): [String]
    Component(filter: NameFilterInput): [String]
    Enumeration(filter: NameFilterInput): [String]
    Interaction(filter: NameFilterInput): [String]
    Interface(filter: NameFilterInput): [String]
    Package(filter: NameFilterInput): [String]
    State(filter: NameFilterInput): [String]
    StateMachine(filter: NameFilterInput): [String]
    UseCase(filter: NameFilterInput): [String]
}

# Enums

enum Type {
    ECORE
    XTEXT
    UML
    BPMN2
    PNML
    SCULPTOR
    RDS
    SIMULINK
    ARCHIMATE
}

enum Operator {
    EQ
    GT
    GTE
    LT
    LTE
    NE
}

# Input types

input LogicalFilterInput {
    op: Operator!
    value: Int!
}

input NameFilterInput {
    values: [String]!
}